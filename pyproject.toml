# package build
# https://peps.python.org/pep-0517/
[build-system]
requires = ["setuptools>=65", "wheel", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]

# package basics
# https://peps.python.org/pep-0621/
[project]
name = "cdp-backend"
description = "Data storage utilities and processing pipelines used by CDP instances."
keywords = [
  "civic technology",
  "open government",
]
readme = "README.md"
requires-python = ">=3.8"
license = { text = "MIT License" }
authors = [
  { name = "Eva Maxfield Brown", email = "evamaxfieldbrown@gmail.com" },
  { name = "To Huynh" },
  { name = "Isaac Na" },
  { name = "Council Data Project Contributors" },
]
classifiers = [
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Natural Language :: English",
  "Programming Language :: Python :: 3.8",
  "Programming Language :: Python :: 3.9",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
]
dynamic = ["version"]
dependencies = [
  "aiohttp>=3.8.1",
  "backoff>=2.2",
  "dataclasses-json>=0.5",
  "fireo~=1.5",
  "fsspec",  # Version pin set by gcsfs
  "gcsfs>=2022.7.1",
  "google-cloud-firestore",  # Version pin set by fireo
  "PyYAML>=5.4.1",
  "requests>=2.26.0",
]

[project.urls]
Homepage = "https://github.com/CouncilDataProject/cdp-backend"
"Bug Tracker" = "https://github.com/CouncilDataProject/cdp-backend/issues"
Documentation = "https://CouncilDataProject.github.io/cdp-backend"
"User Support" = "https://github.com/CouncilDataProject/cdp-backend/issues"

# extra dependencies
# https://peps.python.org/pep-0621/#dependencies-optional-dependencies
[project.optional-dependencies]
pipeline = [
  "dask[distributed]>=2021.7.0",
  "faster-whisper==0.3.0",
  "ffmpeg-python>=0.2.0",
  "graphviz>=0.16",
  "imageio>=2.18",
  "imageio-ffmpeg>=0.4",
  "m3u8-To-MP4==0.1.10",
  "nltk>=3.6",
  "numpy>=1.0",
  "pandas>=1.2",
  "prefect>=1.2,<2",
  "pyarrow>=8.0",
  "pydub>=0.25.1",
  "rapidfuzz>=2.0",
  "spacy>=3.4",
  "spacy-transformers>=1.1",
  "torch>=1.10",
  "tqdm>=4.62",
  "transformers>=4.16",
  "vimeo_downloader>=0.4",
  "yt-dlp>=2023.2.17",
]
functions = [
  "flask==2.1.0",
  "functions-framework==3.1.0",
  "ffmpeg-python==0.2.0",
]
lint = [
  "black>=22.3.0",
  "check-manifest>=0.48",
  "ruff>=0.0.216",
  "mypy>=0.790",
  "pre-commit>=2.20.0",
  "types-requests>=2.28.5",
  "types-pytz>=2022.1.2",
  "types-PyYAML>=6.0.11",
]
test = [
  # Pytest
  "coverage>=5.1",
  "pytest>=5.4.3",
  "pytest-cov>=2.9.0",
  "pytest-raises>=0.11",
  # Extras
  "networkx>=2.5",
  "pydot>=1.4",
  "requests-mock>=1.10.0"
]
docs = [
  # Sphinx + Doc Gen + Styling
  "m2r2>=0.2.7",
  "Sphinx>=4.0.0",
  "furo>=2022.4.7",
  # Extensions
  "numpydoc",
  "sphinx-copybutton",
  # TODO: Pins
  "docutils>=0.18,<0.19",
]
dev = [
  "bokeh",  # Used in dask / distributed for dashboard
  "ipython>=8.4.0",
]

# entry points
# https://peps.python.org/pep-0621/#entry-points
[project.entry-points."console_scripts"]
clean_cdp_database = "cdp_backend.bin.clean_cdp_database:main"
clean_cdp_filestore = "cdp_backend.bin.clean_cdp_filestore:main"
create_cdp_database_uml = "cdp_backend.bin.create_cdp_database_uml:main"
create_cdp_ingestion_models_doc = "cdp_backend.bin.create_cdp_ingestion_models_doc:main"
create_cdp_transcript_model_doc = "cdp_backend.bin.create_cdp_transcript_model_doc:main"
run_cdp_event_gather = "cdp_backend.bin.run_cdp_event_gather:main"
run_cdp_event_index_generation = "cdp_backend.bin.run_cdp_event_index_generation:main"
process_cdp_event_index_chunk = "cdp_backend.bin.process_cdp_event_index_chunk:main"
search_cdp_events = "cdp_backend.bin.search_cdp_events:main"
process_special_event = "cdp_backend.bin.process_special_event:main"
add_content_hash_to_sessions = "cdp_backend.bin.add_content_hash_to_sessions:main"
store_cdp_metadata_document = "cdp_backend.bin.store_cdp_metadata_document:main"
get_cdp_infrastructure_stack = "cdp_backend.bin.get_cdp_infrastructure_stack:main"

# build settings
# https://setuptools.pypa.io/en/latest/userguide/pyproject_config.html
[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
exclude = ["*docs/*", "*tests/*"]

[tool.setuptools.package-data]
"*" = [
  "*.yaml",
  "py.typed",
  "*.csv",
  "*infrastructure/*.rules",
  "*infrastructure/Justfile",
  "*infrastructure/*.json",
  "*infrastructure/**/.gcloudignore",
  "*infrastructure/**/requirements.txt",
  "*infrastructure/**/README.md",
]

# tools
[tool.black]
line-length = 88

# https://github.com/charliermarsh/ruff
[tool.ruff]
line-length = 88
target-version = "py38"
extend-select = [
    "E",      # style errors
    "F",      # flakes
    "D",      # pydocstyle
    "I001",   # isort
    "UP",     # pyupgrade
    "N",      # pep8-naming
    # "S",    # bandit
    "C",      # flake8-comprehensions
    "B",      # flake8-bugbear
    "A001",   # flake8-builtins
    "RUF",    # ruff-specific rules
    "RUF100", # Unused noqa directive
]
extend-ignore = [
    "D100", # Missing docstring in public module
    "D101", # Missing docstring in public class
    "D103", # Missing docstring in public function
    "D107", # Missing docstring in __init__
    "D203", # 1 blank line required before class docstring
    "D205", # 1 blank line required between summary line and description
    "D212", # Multi-line docstring summary should start at the first line
    "D213", # Multi-line docstring summary should start at the second line
    "D413", # Missing blank line after last section
    "D416", # Section name should end with a colon
]

[tool.ruff.per-file-ignores]
"tests/*.py" = ["D"]

# https://github.com/mgedmin/check-manifest#configuration
[tool.check-manifest]
ignore = [
  ".editorconfig",
  ".pre-commit-config.yaml",
  "CODE_OF_CONDUCT.md",
  "CONTRIBUTING.md",
  "Justfile",
  ".cookiecutter.yaml",
  "*docs/*",
  "codecov.yml",
  "dev-infrastructure/**",
  "example-configs/*",
  "*_captions.vtt",
  "*_transcript.json",
  "*-transcript.json",
  "*.vtt",
  "*example_*.mp4",
  "*example_*.mkv",
  "*.parquet",
  "*fake_*",
  "*generated_*",
  "*.wav",
  "Dockerfile",
]

[tool.mypy]
files = "cdp_backend/*.py"
ignore_missing_imports = true
disallow_untyped_defs = true
check_untyped_defs = true
show_error_codes = true